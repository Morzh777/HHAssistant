import { Injectable, HttpException, HttpStatus } from '@nestjs/common';
import axios from 'axios';
import { Vacancy } from '../types/vacancy.types';

@Injectable()
export class VacancyService {
  private readonly HH_API_BASE_URL = 'https://api.hh.ru';
  private readonly USER_AGENT =
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36';

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
  private readonly SINGLE_PARAM_KEYS: readonly string[];
  private readonly ARRAY_PARAM_MAPPINGS: Array<{
    key: string;
    field: string;
  }>;
  private readonly SERIALIZERS: Record<string, (v: unknown) => string>;

  constructor() {
    this.SINGLE_PARAM_KEYS = [
      'text',
      'search_field',
      'experience',
      'employment',
      'schedule',
      'area',
      'metro',
      'professional_role',
      'industry',
      'employer_id',
      'salary',
      'currency',
      'label',
      'period',
      'date_from',
      'date_to',
      'top_lat',
      'bottom_lat',
      'left_lng',
      'right_lng',
      'order_by',
      'order',
      'describe_currency',
      'per_page',
      'page',
      // –±—É–ª–µ–≤—ã–µ —Ñ–ª–∞–≥–∏, –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ true
      'only_with_salary',
      'clusters',
    ] as const;

    this.ARRAY_PARAM_MAPPINGS = [
      { key: 'professional_role', field: 'professional_roles' },
      { key: 'skill', field: 'skills' },
      { key: 'area', field: 'areas' },
      { key: 'metro', field: 'metro_stations' },
      { key: 'industry', field: 'industries' },
      { key: 'employer_id', field: 'employer_ids' },
      { key: 'label', field: 'labels' },
    ];

    this.SERIALIZERS = {
      // boolean ‚Üí 'true' —Ç–æ–ª—å–∫–æ –ø—Ä–∏ true
      only_with_salary: (v) => (v === true ? 'true' : ''),
      clusters: (v) => (v === true ? 'true' : ''),
    };
  }

  /**
   * –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π
   */
  async searchVacancies(
    searchParams: Record<string, unknown>,
  ): Promise<unknown> {
    try {
      const params = this.buildSearchParams(searchParams);
      const url = `${this.HH_API_BASE_URL}/vacancies?${params.toString()}`;

      console.log('üåê URL –∑–∞–ø—Ä–æ—Å–∞:', url);
      console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', params.toString());

      const response = await axios.get(url);

      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç HH API:', response.status);
      return response.data as unknown;
    } catch (error: unknown) {
      const errorMessage =
        error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';

      throw new HttpException(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π: ${errorMessage}`,
        HttpStatus.BAD_REQUEST,
      );
    }
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è HH API
   */
  private buildSearchParams(
    searchParams: Record<string, unknown>,
  ): URLSearchParams {
    const params = new URLSearchParams();

    const shouldAppend = (value: unknown): boolean =>
      typeof value === 'boolean' ? value : value != null && value !== '';

    const toParamValue = (key: string, value: unknown): string => {
      const serializer = this.SERIALIZERS[key];
      if (serializer) return serializer(value);
      if (typeof value === 'number') return String(value);
      return String(value);
    };

    // –û–¥–∏–Ω–æ—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Üí entries ‚Üí filter ‚Üí append
    const singlePairs = this.SINGLE_PARAM_KEYS.map(
      (key) => [key, searchParams[key]] as const,
    );

    singlePairs
      .filter(([, v]) => shouldAppend(v))
      .forEach(([k, v]) => params.append(k, toParamValue(k, v)));

    // –ú–∞—Å—Å–∏–≤—ã –∑–Ω–∞—á–µ–Ω–∏–π ‚Üí flatMap
    const arrayPairs = this.ARRAY_PARAM_MAPPINGS.flatMap(({ key, field }) => {
      const values = (searchParams[field] ?? []) as string[];
      return values
        .filter((v) => v != null && v !== '')
        .map((v) => [key, v] as const);
    });

    arrayPairs.forEach(([k, v]) => params.append(k, v));

    return params;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏
   */
  async getVacancyById(vacancyId: string): Promise<Vacancy> {
    try {
      const url = `${this.HH_API_BASE_URL}/vacancies/${vacancyId}`;

      console.log('üåê URL –∑–∞–ø—Ä–æ—Å–∞ –≤–∞–∫–∞–Ω—Å–∏–∏:', url);

      const response = await axios.get(url);

      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç HH API –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏:', response.status);

      return response.data as Vacancy;
    } catch (error: unknown) {
      const errorMessage =
        error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';

      throw new HttpException(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏: ${errorMessage}`,
        HttpStatus.BAD_REQUEST,
      );
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ
   */
  async searchVacanciesByStructuredResume(
    resumeAnalysis: any,
  ): Promise<unknown> {
    try {
      const searchParams: Record<string, unknown> = {};

      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
      if (resumeAnalysis.position) {
        searchParams.text = resumeAnalysis.position;
      }

      // –ì–æ—Ä–æ–¥ (–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ = 2)
      if (resumeAnalysis.personalInfo?.location === '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥') {
        searchParams.area = 2;
      }

      // –ù–∞–≤—ã–∫–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
      if (resumeAnalysis.skills && Array.isArray(resumeAnalysis.skills)) {
        const skillNames = resumeAnalysis.skills
          .slice(0, 5) // –ë–µ—Ä–µ–º —Ç–æ–ø-5 –Ω–∞–≤—ã–∫–æ–≤
          .map((skill: any) => skill.name)
          .filter((name: string) => name && name.trim() !== '');

        if (skillNames.length > 0) {
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤—ã–∫–∏ –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –ø–æ–∏—Å–∫—É
          const skillsText = skillNames.join(' ');
          searchParams.text = `${searchParams.text || ''} ${skillsText}`.trim();
        }
      }

      // –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–µ—Å—Ç —Ä–∞–±–æ—Ç—ã
      const experienceCount = resumeAnalysis.experience?.length || 0;
      if (experienceCount >= 2) {
        searchParams.experience = 'between1And3'; // 1-3 –≥–æ–¥–∞
      } else if (experienceCount >= 1) {
        searchParams.experience = 'noExperience'; // –ë–µ–∑ –æ–ø—ã—Ç–∞
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
      searchParams.per_page = 20; // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      searchParams.order_by = 'publication_time';
      searchParams.order = 'desc';
      searchParams.only_with_salary = true; // –¢–æ–ª—å–∫–æ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π

      console.log(
        'üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—é–º–µ:',
        JSON.stringify(searchParams, null, 2),
      );

      return this.searchVacancies(searchParams);
    } catch (error: unknown) {
      const errorMessage =
        error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      throw new HttpException(
        `Structured resume search error: ${errorMessage}`,
        HttpStatus.BAD_REQUEST,
      );
    }
  }
}
