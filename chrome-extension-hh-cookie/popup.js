// Popup –¥–ª—è Chrome Extension
// –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å cookies –≤—Ä—É—á–Ω—É—é

document.addEventListener('DOMContentLoaded', async () => {
  const sendButton = document.getElementById('saveResume');
  const resetButton = document.getElementById('resetResume');
  const testButton = document.getElementById('testNotification');
  const coverLetterButton = document.getElementById('generateCoverLetter');
  const analyzeVacancyButton = document.getElementById('analyzeVacancy');
  const statusDiv = document.getElementById('status');

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–∫–ª–∞–¥–∫—É
  const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –Ω–∞ hh.ru
  let isOnHh = false;
  try {
    if (tab.url) {
      const url = new URL(tab.url);
      isOnHh = /\.hh\.ru$/i.test(url.hostname);
    }
  } catch (error) {
    console.error('Error parsing URL:', error);
    isOnHh = false;
  }
  
  if (!isOnHh) {
    sendButton.textContent = "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ hh.ru";
    sendButton.onclick = () => {
      chrome.tabs.update(tab.id, { url: "https://hh.ru" });
      window.close();
    };
    statusDiv.textContent = "–°–Ω–∞—á–∞–ª–∞ –∑–∞–π–¥–∏—Ç–µ –Ω–∞ hh.ru";
    statusDiv.className = "status error";
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞
    coverLetterButton.disabled = true;
    coverLetterButton.textContent = "–ù—É–∂–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è hh.ru";
    
    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
    analyzeVacancyButton.disabled = true;
    analyzeVacancyButton.textContent = "–ù—É–∂–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è hh.ru";
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–∑—é–º–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—é–º–µ
  if (!tab.url.includes('/resume/') || !tab.url.includes('.hh.ru')) {
    sendButton.textContent = "–û—Ç–∫—Ä—ã—Ç—å —Ä–µ–∑—é–º–µ";
    sendButton.onclick = () => {
      chrome.tabs.update(tab.id, { url: "https://hh.ru/applicant/resumes" });
      window.close();
    };
    statusDiv.textContent = "–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–≤–æ–µ–≥–æ —Ä–µ–∑—é–º–µ";
    statusDiv.className = "status error";
    
    // –ï—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤–∞–∫–∞–Ω—Å–∏–∏ - —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ –∏ –∞–Ω–∞–ª–∏–∑
    if (tab.url.includes('/vacancy/')) {
      coverLetterButton.disabled = false;
      coverLetterButton.textContent = "–°–æ–∑–¥–∞—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ";
      
      analyzeVacancyButton.disabled = false;
      analyzeVacancyButton.textContent = "–ê–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏ üîç";
    } else {
      coverLetterButton.disabled = true;
      coverLetterButton.textContent = "–ù—É–∂–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∞–∫–∞–Ω—Å–∏–∏";
      
      analyzeVacancyButton.disabled = true;
      analyzeVacancyButton.textContent = "–ù—É–∂–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∞–∫–∞–Ω—Å–∏–∏";
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—é–º–µ
  sendButton.addEventListener('click', async () => {
    sendButton.disabled = true;
    sendButton.textContent = "–°–æ—Ö—Ä–∞–Ω—è—é...";
    statusDiv.textContent = "–°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—é–º–µ –Ω–∞ –±—ç–∫–µ–Ω–¥...";
    statusDiv.className = "status";

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ background script
      const response = await chrome.runtime.sendMessage({action: 'saveResume'});
      
      if (response.success) {
        statusDiv.textContent = "‚úÖ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!";
        statusDiv.className = "status success";
      } else {
        throw new Error(response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }
    } catch (error) {
      console.error("Resume save failed:", error);
      statusDiv.textContent = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
      statusDiv.className = "status error";
    } finally {
      sendButton.disabled = false;
      sendButton.textContent = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—é–º–µ";
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ —Ä–µ–∑—é–º–µ
  resetButton.addEventListener('click', async () => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Ä–µ–∑—é–º–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      return;
    }

    resetButton.disabled = true;
    resetButton.textContent = "–°–±—Ä–∞—Å—ã–≤–∞—é...";
    statusDiv.textContent = "–£–¥–∞–ª—è—é —Ñ–∞–π–ª—ã —Ä–µ–∑—é–º–µ...";
    statusDiv.className = "status";

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ background script
      const response = await chrome.runtime.sendMessage({action: 'resetResume'});
      
      if (response.success) {
        statusDiv.textContent = "‚úÖ –§–∞–π–ª—ã —Ä–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!";
        statusDiv.className = "status success";
      } else {
        throw new Error(response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }
    } catch (error) {
      console.error("Resume reset failed:", error);
      statusDiv.textContent = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
      statusDiv.className = "status error";
    } finally {
      resetButton.disabled = false;
      resetButton.textContent = "–°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–∑—é–º–µ";
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
  coverLetterButton.addEventListener('click', async () => {
    coverLetterButton.disabled = true;
    coverLetterButton.textContent = "–ü—Ä–æ–≤–µ—Ä—è—é...";
    statusDiv.textContent = "–ü—Ä–æ–≤–µ—Ä—è—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∏—Å—å–º–∞...";
    statusDiv.className = "status";

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º ID –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const tabs = await chrome.tabs.query({ active: true, currentWindow: true });
      const currentTab = tabs[0];
      
      if (!currentTab.url || !currentTab.url.includes('hh.ru/vacancy/')) {
        throw new Error('–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ hh.ru');
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ URL
      const urlMatch = currentTab.url.match(/\/vacancy\/(\d+)/);
      if (!urlMatch) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –≤–∞–∫–∞–Ω—Å–∏–∏');
      }
      
      const vacancyId = urlMatch[1];
      console.log('Found vacancy ID:', vacancyId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–∏—Å—å–º–æ –¥–ª—è —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
      const { backendUrl = "http://localhost:3000" } = await chrome.storage.sync.get("backendUrl");
      
      try {
        const response = await fetch(`${backendUrl}/cover-letter/${vacancyId}`);
        
        if (response.ok) {
          const data = await response.json();
          
          if (data.success && data.content) {
            // –ü–∏—Å—å–º–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
            statusDiv.textContent = "‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–∏—Å—å–º–æ!";
            statusDiv.className = "status success";
            
            await displayCoverLetter(vacancyId);
            return;
          } else {
            // –ü–∏—Å—å–º–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            console.log('Letter not found, will generate new one:', data.error);
          }
        }
      } catch (error) {
        console.log('Error checking existing letter, will generate new one:', error);
      }

      // –ü–∏—Å—å–º–∞ –Ω–µ—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ
      coverLetterButton.textContent = "–ì–µ–Ω–µ—Ä–∏—Ä—É—é...";
      statusDiv.textContent = "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ...";
      
      const response = await chrome.runtime.sendMessage({action: 'generateCoverLetter'});
      console.log('Response from background:', response);
      
      if (response.success) {
        statusDiv.textContent = "‚úÖ –°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!";
        statusDiv.className = "status success";
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–º–æ –ø–æ ID –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ popup
        await displayCoverLetter(response.vacancyId);
        
      } else {
        throw new Error(response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }
    } catch (error) {
      console.error("Cover letter generation failed:", error);
      statusDiv.textContent = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
      statusDiv.className = "status error";
    } finally {
      coverLetterButton.disabled = false;
      coverLetterButton.textContent = "–°–æ–∑–¥–∞—Ç—å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ";
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  testButton.addEventListener('click', async () => {
    testButton.disabled = true;
    testButton.textContent = "–¢–µ—Å—Ç–∏—Ä—É—é...";
    statusDiv.textContent = "–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...";
    statusDiv.className = "status";

    try {
      const response = await chrome.runtime.sendMessage({action: 'testNotification'});
      if (response.success) {
        statusDiv.textContent = "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!";
        statusDiv.className = "status success";
      } else {
        throw new Error(response.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }
    } catch (error) {
      console.error("Test notification failed:", error);
      statusDiv.textContent = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
      statusDiv.className = "status error";
    } finally {
      testButton.disabled = false;
      testButton.textContent = "–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π";
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
  analyzeVacancyButton.addEventListener('click', async () => {
    analyzeVacancyButton.disabled = true;
    analyzeVacancyButton.textContent = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...";
    statusDiv.textContent = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞–∫–∞–Ω—Å–∏—é –Ω–∞ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å...";
    statusDiv.className = "status";

    try {
      // –ü–æ–ª—É—á–∞–µ–º ID –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const tabs = await chrome.tabs.query({ active: true, currentWindow: true });
      const currentTab = tabs[0];
      
      if (!currentTab.url || !currentTab.url.includes('hh.ru/vacancy/')) {
        throw new Error('–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ hh.ru');
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ URL
      const urlMatch = currentTab.url.match(/\/vacancy\/(\d+)/);
      if (!urlMatch) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –≤–∞–∫–∞–Ω—Å–∏–∏');
      }
      
      const vacancyId = urlMatch[1];
      console.log('Analyzing vacancy ID:', vacancyId);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–Ω–∞–ª–∏–∑ –¥–ª—è —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
      const { backendUrl = "http://localhost:3000" } = await chrome.storage.sync.get("backendUrl");
      
      try {
        const response = await fetch(`${backendUrl}/vacancy-analysis/${vacancyId}`);
        
        if (response.ok) {
          const data = await response.json();
          
          if (data.success && data.data) {
            // –ê–Ω–∞–ª–∏–∑ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
            statusDiv.textContent = "‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑!";
            statusDiv.className = "status success";
            
            await displayVacancyAnalysis(data.data);
            return;
          }
        }
      } catch (error) {
        console.log('No existing analysis found, will generate new one:', error);
      }

      // –ê–Ω–∞–ª–∏–∑–∞ –Ω–µ—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
      analyzeVacancyButton.textContent = "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–Ω–∞–ª–∏–∑...";
      statusDiv.textContent = "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏...";
      
      const analysisResponse = await fetch(`${backendUrl}/vacancy-analysis/analyze/${vacancyId}`, {
        method: 'POST'
      });
      
      if (!analysisResponse.ok) {
        const errorText = await analysisResponse.text();
        throw new Error(`HTTP ${analysisResponse.status}: ${errorText}`);
      }
      
      const analysisData = await analysisResponse.json();
      console.log('Analysis response:', analysisData);
      
      if (analysisData.success && analysisData.data) {
        statusDiv.textContent = "‚úÖ –ê–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!";
        statusDiv.className = "status success";
        
        await displayVacancyAnalysis(analysisData.data);
        
      } else {
        throw new Error(analysisData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }
    } catch (error) {
      console.error("Vacancy analysis failed:", error);
      statusDiv.textContent = `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
      statusDiv.className = "status error";
    } finally {
      analyzeVacancyButton.disabled = false;
      analyzeVacancyButton.textContent = "–ê–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏ üîç";
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∏—Å—å–º–∞ –≤ popup
  async function displayCoverLetter(vacancyId) {
    try {
      const { backendUrl = "http://localhost:3000" } = await chrome.storage.sync.get("backendUrl");
      
      const response = await fetch(`${backendUrl}/cover-letter/${vacancyId}`);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      
      if (data.success && data.content) {
        const container = document.getElementById('coverLetterContainer');
        const content = document.getElementById('coverLetterContent');
        
        content.textContent = data.content;
        container.style.display = 'block';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        document.getElementById('copyCoverLetter').onclick = () => {
          navigator.clipboard.writeText(data.content).then(() => {
            alert('–ü–∏—Å—å–º–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!');
          });
        };
        
        document.getElementById('closeCoverLetter').onclick = () => {
          container.style.display = 'none';
        };
        
      } else {
        throw new Error(data.error || '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
      }
    } catch (error) {
      console.error('Error loading cover letter:', error);
      statusDiv.textContent = `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Å—å–º–∞: ${error.message}`;
      statusDiv.className = "status error";
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ popup
  async function displayVacancyAnalysis(analysisData) {
    try {
      const container = document.getElementById('vacancyAnalysisContainer');
      const recommendationDiv = document.getElementById('analysisRecommendation');
      const summaryDiv = document.getElementById('analysisSummary');
      const redFlagsList = document.getElementById('redFlagsList');
      const positivesList = document.getElementById('positivesList');
      const toxicityScore = document.getElementById('toxicityScore');
      const salaryAdequacy = document.getElementById('salaryAdequacy');
      const experienceMatch = document.getElementById('experienceMatch');
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å —Ü–≤–µ—Ç–æ–º
      const recommendationConfig = {
        apply: { text: '‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è', color: '#d4edda', borderColor: '#28a745' },
        caution: { text: '‚ö†Ô∏è –û—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é', color: '#fff3cd', borderColor: '#ffc107' },
        avoid: { text: '‚ùå –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è', color: '#f8d7da', borderColor: '#dc3545' }
      };
      
      const config = recommendationConfig[analysisData.recommendation] || recommendationConfig.caution;
      recommendationDiv.textContent = config.text;
      recommendationDiv.style.backgroundColor = config.color;
      recommendationDiv.style.border = `2px solid ${config.borderColor}`;
      
      // –†–µ–∑—é–º–µ
      summaryDiv.innerHTML = `<strong>–†–µ–∑—é–º–µ:</strong> ${analysisData.summary}`;
      
      // –ö—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏
      redFlagsList.innerHTML = '';
      if (analysisData.redFlags && analysisData.redFlags.length > 0) {
        analysisData.redFlags.forEach(flag => {
          const li = document.createElement('li');
          li.textContent = flag;
          li.style.color = '#dc3545';
          redFlagsList.appendChild(li);
        });
      } else {
        const li = document.createElement('li');
        li.textContent = '–ö—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã';
        li.style.color = '#28a745';
        redFlagsList.appendChild(li);
      }
      
      // –ü–ª—é—Å—ã
      positivesList.innerHTML = '';
      if (analysisData.positives && analysisData.positives.length > 0) {
        analysisData.positives.forEach(positive => {
          const li = document.createElement('li');
          li.textContent = positive;
          li.style.color = '#28a745';
          positivesList.appendChild(li);
        });
      } else {
        const li = document.createElement('li');
        li.textContent = '–û—Å–æ–±—ã–µ –ø–ª—é—Å—ã –Ω–µ –≤—ã—è–≤–ª–µ–Ω—ã';
        li.style.color = '#6c757d';
        positivesList.appendChild(li);
      }
      
      // –î–µ—Ç–∞–ª–∏
      toxicityScore.textContent = analysisData.toxicityScore;
      toxicityScore.style.color = analysisData.toxicityScore <= 3 ? '#28a745' : 
                                  analysisData.toxicityScore <= 6 ? '#ffc107' : '#dc3545';
      
      const salaryLabels = {
        adequate: '–ê–¥–µ–∫–≤–∞—Ç–Ω–∞—è',
        low: '–ù–∏–∑–∫–∞—è',
        high: '–í—ã—Å–æ–∫–∞—è',
        not_specified: '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
      };
      salaryAdequacy.textContent = salaryLabels[analysisData.salaryAdequacy] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      const experienceLabels = {
        junior_friendly: '–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∂—É–Ω–∏–æ—Ä–æ–≤',
        requires_experience: '–¢—Ä–µ–±—É–µ—Ç –æ–ø—ã—Ç',
        unrealistic: '–ù–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è'
      };
      experienceMatch.textContent = experienceLabels[analysisData.experienceMatch] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      container.style.display = 'block';
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
      document.getElementById('closeVacancyAnalysis').onclick = () => {
        container.style.display = 'none';
      };
      
    } catch (error) {
      console.error('Error displaying vacancy analysis:', error);
      statusDiv.textContent = `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`;
      statusDiv.className = "status error";
    }
  }
});
